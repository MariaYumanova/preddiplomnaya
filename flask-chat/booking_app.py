import eventlet

eventlet.monkey_patch()  # –í–∞–∂–Ω–æ: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–º—ã–º –ø–µ—Ä–≤—ã–º –∏–º–ø–æ—Ä—Ç–æ–º

from flask import Flask, request
from flask_socketio import SocketIO, emit
from datetime import datetime, timedelta
import json

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key_here'
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='eventlet')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
TIME_SLOTS = [f"{h}:00" for h in range(10, 18)]  # –° 10:00 –¥–æ 17:00
MAX_BOOKINGS_PER_SLOT = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–µ–π –Ω–∞ –æ–¥–∏–Ω —Å–ª–æ—Ç
BOOKING_DAYS_AHEAD = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –±—Ä–æ–Ω–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
bookings = {}


def generate_time_slots():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥"""
    slots = {}
    for day in range(BOOKING_DAYS_AHEAD):
        date = (datetime.now() + timedelta(days=day)).strftime('%Y-%m-%d')
        slots[date] = {slot: [] for slot in TIME_SLOTS}
    return slots


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bookings = generate_time_slots()


@socketio.on('connect')
def handle_connect():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    emit('slots_update', bookings)


@socketio.on('book_slot')
def handle_booking(data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        date = data['date']
        slot = data['slot']
        user_id = data['user_id']
        user_name = data['user_name']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
        if date not in bookings or slot not in bookings[date]:
            emit('booking_error', {'message': 'Invalid time slot'})
            return

        if len(bookings[date][slot]) >= MAX_BOOKINGS_PER_SLOT:
            emit('booking_error', {
                'message': f'–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª—é–¥–µ–π ({MAX_BOOKINGS_PER_SLOT})'
            })
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
        if any(booking['user_id'] == user_id for booking in bookings[date][slot]):
            emit('booking_error', {
                'message': '–í—ã —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è'
            })
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–æ–Ω—å
        new_booking = {
            'user_id': user_id,
            'user_name': user_name,
            'booked_at': datetime.now().isoformat()
        }
        bookings[date][slot].append(new_booking)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        emit('booking_success', {
            'date': date,
            'slot': slot,
            'user_name': user_name,
            'current_count': len(bookings[date][slot]),
            'max_count': MAX_BOOKINGS_PER_SLOT
        }, room=request.sid)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        emit('slots_update', bookings, broadcast=True)

    except Exception as e:
        emit('booking_error', {
            'message': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'
        })


@socketio.on('cancel_booking')
def handle_cancel_booking(data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        date = data['date']
        slot = data['slot']
        user_id = data['user_id']

        if date not in bookings or slot not in bookings[date]:
            emit('cancel_error', {'message': 'Invalid time slot'})
            return

        # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bookings[date][slot] = [b for b in bookings[date][slot] if b['user_id'] != user_id]

        emit('cancel_success', {
            'date': date,
            'slot': slot,
            'user_id': user_id
        }, room=request.sid)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        emit('slots_update', bookings, broadcast=True)

    except Exception as e:
        emit('cancel_error', {
            'message': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'
        })


if __name__ == '__main__':
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ http://localhost:5000")
    socketio.run(app, host='0.0.0.0', port=5000, debug=True)